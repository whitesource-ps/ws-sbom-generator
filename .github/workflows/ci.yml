name: CI
on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10.0]
    steps:
      - name: Set Environment Variables
        run: |
          TOOL_NAME=$(echo '${{ github.repository }}' |awk -F '/' '{gsub(/-/, "_", $0) ;print $NF}')
          echo "TOOL_NAME=$TOOL_NAME" >> $GITHUB_ENV
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v2
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
#      - uses: UnicornGlobal/trufflehog-actions-scan@master
#        with:
#          branch: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Change to last ws-sdk version on odd days (Mon, Wed, Fri, Sun)
        run: |
          sdk_c_ver=$(grep "ws-sdk" requirements.txt | awk -F '=' '{print $NF}')
          sdk_t_ver=$(curl -sL https://pypi.org/pypi/ws-sdk/json | jq -r '.releases| keys[]' | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -n1)
          
          if (( $(date +"%u") % 2 )) ; then
            echo "Odd day - Replacing current ws-sdk version: ${sdk_c_ver} with latest release: ${sdk_t_ver}"
            sed -E -i "s/^ws-sdk.+/ws-sdk==${sdk_t_ver}/g" requirements.txt
          else
            echo "Even day" 
          fi
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel pytest pytest flake8
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run tests with pytest
        run: pytest
      - name: Create Wheel Package
        run: python setup.py bdist_wheel
      - name: Install Wheel package
        run: ls -1 dist/*.whl | xargs pip install
      - name: Full test JSON (Organization-Product)
        # from the Natalya Renamed Testing Environment (challenge - v8.1.0)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -a saas -k ${{ secrets.WS_ORG_TOKEN }} -s ${{ secrets.WS_PROJECT_CHALLENGE }} -o /tmp/output
        env:
          DEBUG: 1
      - name: Full test JSON (Organization-Product)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -a saas -k ${{ secrets.WS_ORG_TOKEN }} -s ${{ secrets.WS_PRODUCT_IBM_PROD_TEST }} -o /tmp/output
        env:
          DEBUG: 1
      - name: Full test RDF
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_ORG_TOKEN }} -s ${{ secrets.WS_PROJECT_SDK }} -t rdf -o /tmp/output
      - name: Full test xml
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_ORG_TOKEN }} -s ${{ secrets.WS_PROJECT_DEMO_PIPELINE }} -t xml -o /tmp/output
      - name: Full test TV (tag-value)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.WS_USER_KEY }} -k ${{ secrets.WS_ORG_TOKEN }} -s ${{ secrets.WS_PROJECT_TESTTEST }} -t tv -o /tmp/output
      - name: Full test YAML with  limited permissions
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ${TOOL_NAME} -u ${{ secrets.SRV_USER_MEMBER_OF_USERS }} -y product -k ${{ secrets.WS_PRODUCT_IBM_PROD_TEST }} -s ${{ secrets.WS_PROJECT_CHALLENGE }} -t yaml -o /tmp/output
      - name: Publish to Test PyPI
        if: startsWith(github.ref, 'refs/tags/test-v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
      - name: Prepare tag
        if: contains(github.ref, 'refs/tags/')
        id: prep
        run: |
          DOCKER_IMAGE=whitesourcetools/ws-sbom-generator
          TAGS="${DOCKER_IMAGE}:latest"
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG_V=${GITHUB_REF#refs/tags/v}
            TAGS="$TAGS,${DOCKER_IMAGE}:${TAG_V}"
          fi
          echo ::set-output name=tags::${TAGS}
      - name: Set up Docker Buildx
        if: contains(github.ref, 'refs/tags/')
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push to DockerHub
        if: contains(github.ref, 'refs/tags/')
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          build-args: version=${{ env.VERSION }}
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: dist/${{ env.TOOL_DIR }}-${{ env.VERSION }}-py3-none-any.whl
          prerelease: ${{ env.RELEASE != 'true' }}
          generateReleaseNotes: true
      - name: confluence-markdown-sync - PS documentation
        if: ${{ env.RELEASE == 'true' }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 1992262152
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
      - name: confluence-markdown-sync - Public Community
        if: ${{ env.RELEASE == 'true' }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2313290447
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
